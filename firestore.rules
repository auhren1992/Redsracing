
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user has specific role
    function hasRole(role) {
      return isAuthenticated() && request.auth.token.role == role;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Fallback: check role from users document for current user
    function hasProfileRole(role) {
      return isAuthenticated() &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    // Admins can read and write anything
    allow read, write: if hasRole('admin');
    
    // Users collection - profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || hasRole('team-member');
    }
    
    // User achievements
    match /user_achievements/{achievementId} {
      allow read: if isAuthenticated();
      allow write: if hasRole('team-member'); // Only admins can assign achievements
    }
    
    // Available achievements
    match /achievements/{achievementId} {
      allow read: if isAuthenticated();
      allow write: if hasRole('team-member');
    }
    
    // Gallery images
    match /gallery_images/{imageId} {
      allow read: if true; // Public read for gallery
      // On create, validate uploader matches the auth user using request.resource.data
      allow create: if isAuthenticated() &&
        request.auth.uid == request.resource.data.uploaderUid;
      // On update, allow uploader or team member
      allow update: if hasRole('team-member') ||
        (isAuthenticated() && request.auth.uid == resource.data.uploaderUid);
      allow delete: if hasRole('team-member');
      
      // Comments subcollection
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && 
          request.auth.uid == resource.data.authorUid;
      }
    }
    
    // Race schedule
    match /races/{raceId} {
      allow read: if true; // Public read for race schedule
      allow write: if hasRole('team-member');
    }
    
    // Q&A submissions
    match /qna_submissions/{submissionId} {
      allow read: if hasRole('team-member') || 
        (resource.data.status == 'published');
      allow create: if isAuthenticated();
      allow update: if hasRole('team-member');
    }
    
    // Subscribers (newsletter)
    match /subscribers/{subscriberId} {
      allow create: if true; // Allow anyone to subscribe
      allow read, update, delete: if hasRole('team-member');
    }
    
    // Invitation codes
    match /invitation_codes/{codeId} {
      // Team members or admins can read (via claim or users doc fallback)
      allow read: if hasRole('team-member') || hasRole('admin') || hasProfileRole('team-member') || hasProfileRole('admin');
      // Only admins can create/update/delete (via claim or users doc fallback)
      allow create: if hasRole('admin') || hasProfileRole('admin');
      allow update: if hasRole('admin') || hasProfileRole('admin');
      allow delete: if hasRole('admin') || hasProfileRole('admin');
    }

    // Site configuration (e.g., config/tiktok)
    match /config/{docId} {
      // Allow any authenticated user to read config (e.g., to show UI),
      // but restrict writes to team-members or admins
      allow read: if isAuthenticated();
      allow write: if hasRole('team-member') || hasRole('admin');
    }
    
    // Jonny-specific images (approvals)
    match /jonny_gallery_images/{imageId} {
      // Public can read approved images; team members/admins can read all
      allow read: if (resource.data.approved == true)
                  || hasRole('team-member')
                  || hasProfileRole('team-member')
                  || hasProfileRole('admin');
      // Uploader can create; team members can update/approve or delete
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.uploaderUid;
      allow update: if hasRole('team-member')
                    || hasProfileRole('team-member')
                    || (isAuthenticated() && request.auth.uid == resource.data.uploaderUid);
      allow delete: if hasRole('team-member') || hasProfileRole('team-member');
    }

    // Jonny-specific videos
    match /jonny_videos/{videoId} {
      allow read: if true;
      allow write: if hasRole('team-member');
    }
    
    // Client error logs (frontend)
    match /client_logs/{logId} {
      // Any authenticated user may create a log entry
      allow create: if isAuthenticated();
      // Team members/admins can read logs (via token or users doc fallback)
      allow read: if hasRole('team-member') || hasRole('admin') || hasProfileRole('team-member') || hasProfileRole('admin');
      // Admin can delete (via token or users doc fallback)
      allow delete: if hasRole('admin') || hasProfileRole('admin');
    }
    
    // TikTok videos library
    match /tiktok_videos/{videoId} {
      // Public can read published videos; team-members/admins can read all
      allow read: if (resource.data.published == true)
                  || hasRole('team-member')
                  || hasProfileRole('team-member')
                  || hasProfileRole('admin');
      allow write: if hasRole('team-member') || hasRole('admin') || hasProfileRole('admin');
      allow delete: if hasRole('team-member') || hasRole('admin') || hasProfileRole('admin');
    }

    // Default deny rule
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

